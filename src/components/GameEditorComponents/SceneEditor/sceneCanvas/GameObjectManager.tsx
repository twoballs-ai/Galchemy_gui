import React, { useEffect } from 'react';

/* ---------- —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ---------- */
interface GameObjectRaw {
  id: string;
  type: string;
  [k: string]: any;     // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–º–µ—Ç –∫–∞–∫ –µ—Å—Ç—å
}

interface SceneData {
  objects: GameObjectRaw[];
}

interface GameObjectManagerProps {
  coreInstance: any;                              // —Ç–∏–ø Core –≤ –≤–∞—à–µ–º —è–¥—Ä–µ
  shapeFactory: Record<string, (opts: any) => any>;
  sceneData: SceneData;
  activeScene: string;
  onGameObjectsMapUpdate: (map: Map<string, any>) => void;
  requestRenderIfNotRequested: () => void;
}

const GameObjectManager: React.FC<GameObjectManagerProps> = ({
  coreInstance,
  shapeFactory,
  sceneData,
  activeScene,
  onGameObjectsMapUpdate,
  requestRenderIfNotRequested,
}) => {

  /* ---------- —Å–æ–∑–¥–∞—Ç—å live-–æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É ---------- */
  const createGameObject = (obj: GameObjectRaw) => {
    const builder = shapeFactory[obj.type];
    if (!builder) {
      console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:', obj.type);
      return null;
    }
    const opts = {
      ...obj,
      // –≤–∞–∂–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ Redux-–ø–æ–ª—è (x,y,z)
      position: [ obj.x, obj.y, obj.z ],
    };
    const go = builder(opts);    // –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫—Ä–æ–º–µ id/type) –∏–¥—É—Ç –∫–∞–∫ –µ—Å—Ç—å
    go.id = obj.id;
    if (coreInstance.showHelpers) {
      go.isEditorMode = true;
    }
  
    return go;
  };

  /* ---------- —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è React-—Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –¥–≤–∏–∂–∫–æ–º ---------- */
  useEffect(() => {
    if (!coreInstance || !shapeFactory) return;

        const sceneManager = coreInstance.getSceneManager?.()
                       ?? coreInstance.sceneManager;  

    if (!sceneManager.getCurrentScene()
        || sceneManager.getCurrentScene().name !== activeScene) {
      sceneManager.createScene(activeScene);
      sceneManager.changeScene(activeScene);
    }

        /* -------- —Ü–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞, –∫—É–¥–∞ –∫–ª–∞–¥—ë–º –æ–±—ä–µ–∫—Ç—ã -------- */
        const scene =
          sceneManager.scenes?.get?.(activeScene)     // –ø–æ –∏–º–µ–Ω–∏
          ?? sceneManager.getCurrentScene();          // –ª–∏–±–æ —Ç–µ–∫—É—â–∞—è
    
        if (!scene) return;                           // safety-check
    
        const liveMap = new Map<string, any>();
    
        sceneData.objects.forEach(obj => {
          const go = createGameObject(obj);
          if (go) {
            sceneManager.addGameObjectToScene(activeScene, go);
             // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ ‚Äî –ø–æ–º–µ—á–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç    if (coreInstance.showHelpers) {      go.isEditorMode = true;
 
            liveMap.set(obj.id, go);
        
            // üî• –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–º–µ—Ä–∞ ‚Äî –¥–µ–ª–∞–µ–º –µ—ë –∞–∫—Ç–∏–≤–Ω–æ–π!
            if (obj.type === 'camera') {
              const scene = sceneManager.scenes.get(activeScene) ?? sceneManager.getCurrentScene();
              if (scene) {
                scene.activeCamera = go;
              }
            }
          }
        });
    onGameObjectsMapUpdate(liveMap);
    requestRenderIfNotRequested();
  }, [coreInstance, shapeFactory, sceneData.objects, activeScene,
      requestRenderIfNotRequested]);

  return null;
};

export default GameObjectManager;
